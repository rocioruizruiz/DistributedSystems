# Python stubs generated by omniidl from Filter.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


#
# Start of module "FilterApp"
#
__name__ = "FilterApp"
_0_FilterApp = omniORB.openModule("FilterApp", r"Filter.idl")
_0_FilterApp__POA = omniORB.openModule("FilterApp__POA", r"Filter.idl")


# interface Filter
_0_FilterApp._d_Filter = (omniORB.tcInternal.tv_objref, "IDL:FilterApp/Filter:1.0", "Filter")
omniORB.typeMapping["IDL:FilterApp/Filter:1.0"] = _0_FilterApp._d_Filter
_0_FilterApp.Filter = omniORB.newEmptyClass()
class Filter :
    _NP_RepositoryId = _0_FilterApp._d_Filter[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_FilterApp.Filter = Filter
_0_FilterApp._tc_Filter = omniORB.tcInternal.createTypeCode(_0_FilterApp._d_Filter)
omniORB.registerType(Filter._NP_RepositoryId, _0_FilterApp._d_Filter, _0_FilterApp._tc_Filter)

# Filter operations and attributes
Filter._d_applyFilter = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), ((omniORB.tcInternal.tv_string,0), ), None)

# Filter object reference
class _objref_Filter (CORBA.Object):
    _NP_RepositoryId = Filter._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def applyFilter(self, *args):
        return self._obj.invoke("applyFilter", _0_FilterApp.Filter._d_applyFilter, args)

omniORB.registerObjref(Filter._NP_RepositoryId, _objref_Filter)
_0_FilterApp._objref_Filter = _objref_Filter
del Filter, _objref_Filter

# Filter skeleton
__name__ = "FilterApp__POA"
class Filter (PortableServer.Servant):
    _NP_RepositoryId = _0_FilterApp.Filter._NP_RepositoryId


    _omni_op_d = {"applyFilter": _0_FilterApp.Filter._d_applyFilter}

Filter._omni_skeleton = Filter
_0_FilterApp__POA.Filter = Filter
omniORB.registerSkeleton(Filter._NP_RepositoryId, Filter)
del Filter
__name__ = "FilterApp"

#
# End of module "FilterApp"
#
__name__ = "Filter_idl"

_exported_modules = ( "FilterApp", )

# The end.
